#!/bin/bash

set -e
set -u
set -o pipefail

umask 027

SCRIPT_NAME=
SCRIPT_NAME="$(basename "$0")"

set -o allexport
source "/etc/sysconfig/ec2-environment"
set +o allexport

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

function get_object {
  local -r source="$1"
  local -r target="$2"
  local -r user="$3"

  local -r secrets_bucket_name="${TAILSCALE_SECRETS_BUCKET_NAME}"

  log_info "Downloading ${source}"

  aws s3api get-object \
    --bucket "${secrets_bucket_name}" \
    --key "${source}" \
    "${target}" > /dev/null || exit 1

  chown "${user}:${user}" "${target}"
}

function get_object_value {
  local -r source="$1"
  local secrets_bucket_name="${TAILSCALE_SECRETS_BUCKET_NAME}"

  log_info "Downloading ${source}"

  aws s3 cp --quiet \
    "s3://${secrets_bucket_name}/${source}" /dev/stdout || exit 1
}

function get_vpc_cidr {
  local -r type="${1}"
  local -r interface="${2}"

  local variable_reference

  variable_reference="EC2_INSTANCE_${interface^^}_${type^^}_VPC_CIDR"

  echo "${!variable_reference}"
}

function run {
  umask 027

  local auth_key
  local ipv4_cidr_block
  local ipv6_cidr_block
  local interface="eth0"

  auth_key="$(get_object_value "bastion/tailscale-auth-key.txt")"
  ipv4_cidr_block="$(get_vpc_cidr "ipv4" "${interface}")"
  ipv6_cidr_block="$(get_vpc_cidr "ipv6" "${interface}")"

  tailscale up \
    --accept-dns=false \
    --accept-routes=false \
    --authkey="${auth_key}" \
    --advertise-routes="${ipv4_cidr_block},${ipv6_cidr_block}" || exit 1
}

if [[ -z "${TAILSCALE_SECRETS_BUCKET_NAME}" ]]
then
  log_error "TAILSCALE_SECRETS_BUCKET_NAME not set"

  exit 1
fi

run "$@"
