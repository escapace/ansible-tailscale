#!/bin/bash

set -e
set -u
set -o pipefail

SCRIPT_NAME=
SCRIPT_NAME="$(basename "$0")"

function wrap() {
  local strings="${1}"

  local length
  local cols
  local width

  length="$(echo -n "${strings}" | awk -F '|' '{print $1}' | awk '{ print length }' | sort -n | tail -1)"
  cols="$(tput cols)"

  if [[ $(((cols - 4) / length)) -ge 2 ]]; then
    if [[ $((cols - length - 4)) -ge 80 ]]; then
      width=80
    else
      width=$((cols - length - 4))
    fi

    echo -e "${strings}" \
      | fold -s -w "${width}" \
      | sed -e "/--/! s|^| \||g" \
      | column -t -s '|' \
      | sed 's/^/  /'
  else
    local lines
    local line
    readarray -t lines <<< "${strings}"
    local option
    local description

    if [[ "${cols}" -ge 80 ]]; then
      width="78"
    else
      width=$((cols - 2))
    fi

    for line in "${lines[@]}"; do
      option="${line%%|*}"
      description=${line#*|}

      echo "${option}"
      echo
      echo "${description}" | fold -s -w "${width}" | sed 's/^/  /'
      echo
    done
  fi
}

function print_usage() {
  echo
  echo "Usage: run-tailscale [OPTIONS]"
  echo
  echo "This script is used to configure and run tailscale on an AWS server."
  echo
  echo "Options:"
  echo
  wrap "$(
    echo -e "--role|The instance role, one of \"server\", \"client\" or \"bastion\"."
    echo -e "--dns|Provide DNS service for tailscale network."
    echo -e "--secrets-bucket-name|AWS S3 secrets bucket name."
  )"
  echo
}

function log() {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  echo >&2 -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info() {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn() {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error() {
  local -r message="$1"
  log "ERROR" "$message"
}

function assert_not_empty() {
  local -r arg_name="$1"
  local -r arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed() {
  local -r name="$1"

  if [[ ! $(command -v "${name}") ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

function run() {
  umask 022

  local secrets_bucket_name=""
  local tailscale_dns="false"
  local role=""

  while [[ $# -gt 0 ]]; do
    local key="$1"

    case "$key" in
      --role)
        assert_not_empty "$key" "$2"
        role="$2"
        shift
        ;;
      --secrets-bucket-name)
        assert_not_empty "$key" "$2"
        secrets_bucket_name="$2"
        shift
        ;;
      --dns)
        tailscale_dns=true
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--secrets-bucket-name" "$secrets_bucket_name"
  assert_not_empty "--role" "$role"

  if ! [[ "$role" == "server" || "$role" == "client" || "$role" == "bastion" ]]; then
    log_error "Unrecognized value for the --role flag."
    exit 1
  fi

  assert_is_installed "systemctl"
  assert_is_installed "aws"
  assert_is_installed "curl"
  assert_is_installed "jq"

  local -r config=$(
    cat << EOF
[Service]
Environment='TAILSCALE_SECRETS_BUCKET_NAME=${secrets_bucket_name}'
Environment='TAILSCALE_DNS=${tailscale_dns}'
Environment='TAILSCALE_ROLE=${role}'
ExecStartPost=retry /opt/tailscale/bin/tailscale-up

EOF
  )

  echo -e "$config" > "/etc/systemd/system/tailscaled.service.d/020-tailscale-up.conf"

  sudo systemctl daemon-reload
  sudo systemctl enable tailscaled.service
  sudo systemctl --no-block restart tailscaled.service
}

run "$@"
